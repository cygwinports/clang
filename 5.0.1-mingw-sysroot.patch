--- origsrc/cfe-5.0.1.src/lib/Driver/ToolChains/MinGW.cpp	2017-08-10 20:47:32.000000000 -0500
+++ src/cfe-5.0.1.src/lib/Driver/ToolChains/MinGW.cpp	2017-12-31 18:18:34.610637300 -0600
@@ -302,9 +302,7 @@ toolchains::MinGW::MinGW(const Driver &D
     : ToolChain(D, Triple, Args), CudaInstallation(D, Triple, Args) {
   getProgramPaths().push_back(getDriver().getInstalledDir());
 
-  if (getDriver().SysRoot.size())
-    Base = getDriver().SysRoot;
-  else if (llvm::ErrorOr<std::string> GPPName = findGcc())
+  if (llvm::ErrorOr<std::string> GPPName = findGcc())
     Base = llvm::sys::path::parent_path(
         llvm::sys::path::parent_path(GPPName.get()));
   else
@@ -317,8 +315,12 @@ toolchains::MinGW::MinGW(const Driver &D
   getFilePaths().push_back(GccLibDir);
   getFilePaths().push_back(
       (Base + Arch + llvm::sys::path::get_separator() + "lib").str());
-  getFilePaths().push_back(Base + "lib");
-  // openSUSE
+  if (getDriver().SysRoot.size())
+    getFilePaths().push_back(getDriver().SysRoot + "/mingw/lib");
+  else
+#ifdef LLVM_ON_WIN32
+    getFilePaths().push_back(Base + "lib");
+#endif
   getFilePaths().push_back(Base + Arch + "/sys-root/mingw/lib");
 }
 
@@ -436,7 +442,12 @@ void toolchains::MinGW::AddClangSystemIn
 
   addSystemInclude(DriverArgs, CC1Args,
                    Base + Arch + llvm::sys::path::get_separator() + "include");
-  addSystemInclude(DriverArgs, CC1Args, Base + "include");
+  if (getDriver().SysRoot.size())
+    addSystemInclude(DriverArgs, CC1Args, getDriver().SysRoot + "/mingw/include");
+#ifdef LLVM_ON_WIN32
+  else
+    addSystemInclude(DriverArgs, CC1Args, Base + "include");
+#endif
 }
 
 void toolchains::MinGW::AddClangCXXStdlibIncludeArgs(
@@ -458,7 +469,11 @@ void toolchains::MinGW::AddClangCXXStdli
     llvm::sys::path::append(CppIncludeBases[0], Arch, "include", "c++");
     CppIncludeBases.emplace_back(Base);
     llvm::sys::path::append(CppIncludeBases[1], Arch, "include", "c++", Ver);
+#ifdef LLVM_ON_WIN32
     CppIncludeBases.emplace_back(Base);
+#else
+    CppIncludeBases.emplace_back(Base + Arch + "/sys-root/mingw/");
+#endif
     llvm::sys::path::append(CppIncludeBases[2], "include", "c++", Ver);
     CppIncludeBases.emplace_back(GccLibDir);
     llvm::sys::path::append(CppIncludeBases[3], "include", "c++");
