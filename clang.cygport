# IMPORTANT:
# The cygwin-includes.patch must be fixed for new versions of gcc.

inherit cmake python python3 emacs vim

NAME="clang"
VERSION=3.9.1
RELEASE=1
CATEGORY="Devel"
SUMMARY="C/C++ compiler frontend based on LLVM"
DESCRIPTION="Clang is an LLVM native C/C++/ObjC compiler, which aims to deliver
amazingly fast compiles, extremely useful error and warning messages and to
provide a platform for building great source level tools. The Clang Static
Analyzer is a tool that automatically finds bugs in your code, and is a great
example of the sort of tool that can be built using the Clang frontend as a
library to parse C/C++ code."
HOMEPAGE="http://clang.llvm.org/"
SRC_URI="http://www.llvm.org/releases/${VERSION}/cfe-${VERSION}.src.tar.xz"
SRC_DIR="cfe-${VERSION}.src"
PATCH_URI="
	3.7.1-cygwin-ctypes.patch
	3.8.0-cygwin-cxa-atexit.patch
	3.9.1-cygwin-target.patch
	3.8.0-cygwin-includes.patch
	3.8.0-linux-includes.patch
	3.8.0-mingw-sjlj.patch
	3.7.1-mingw-sysroot.patch
	3.7.1-docs-build.patch
	3.9.1-lib-soversion.patch
	3.8.0-resource-dir.patch
"

PKG_NAMES="clang clang-analyzer clang-doc
	emacs-clang-format vim-clang-format git-clang-format
	libclang3.9 libclang-devel python-clang python3-clang
	mingw64-i686-clang mingw64-x86_64-clang"
clang_REQUIRES="gcc-core gcc-g++"
clang_CONTENTS="
	--exclude=html
	usr/bin/clang
	usr/bin/clang++
	usr/bin/clang-check.exe
	usr/bin/clang-format.exe
	usr/share/doc/clang/
	usr/share/man/man1/clang*
"
clang_analyzer_SUMMARY="C/C++/ObjC code analyzer"
clang_analyzer_REQUIRES="clang"
clang_analyzer_CONTENTS="
	usr/bin/scan-*
	usr/libexec/c*-analyzer
	usr/share/scan-*
	usr/share/man/man1/scan-build.*
"
clang_doc_CATEGORY="Doc"
clang_doc_CONTENTS="usr/share/doc/clang/html/"
emacs_clang_format_CATEGORY="Editors"
emacs_clang_format_SUMMARY="C/C++ code formatting support for Emacs"
emacs_clang_format_REQUIRES="clang"
emacs_clang_format_CONTENTS=${EMACS_SITE#/}
vim_clang_format_CATEGORY="Editors"
vim_clang_format_SUMMARY="C/C++ code formatting support for Vim"
vim_clang_format_REQUIRES="clang"
vim_clang_format_CONTENTS=${VIMFILES#/}
git_clang_format_SUMMARY="C/C++ code formatting support for Git"
git_clang_format_REQUIRES="clang git"
git_clang_format_CONTENTS="usr/bin/git-clang-format"
libclang3_9_CATEGORY="Libs"
libclang3_9_SUMMARY="C/C++/ObjC compiler libraries (runtime)"
libclang3_9_CONTENTS="
	usr/bin/clang-3.9.exe
	usr/bin/cygclang*-3.9.dll
	usr/lib/clang/${VERSION}/
"
libclang_devel_CATEGORY="Libs"
libclang_devel_SUMMARY="C/C++/ObjC compiler libraries (development)"
libclang_devel_REQUIRES="libllvm-devel"
libclang_devel_OBSOLETES="libclang-devel-static"
libclang_devel_CONTENTS="
	usr/include/clang*/
	usr/lib/cmake/clang/
	usr/lib/libclang*.dll.a
"
python_clang_CATEGORY="Python"
python_clang_SUMMARY="C/C++/ObjC compiler library (Python bindings)"
python_clang_REQUIRES="libclang3.9"	# ctypes
python_clang_CONTENTS="${PYTHON_SITELIB#/}/clang/"
python3_clang_CATEGORY="Python"
python3_clang_SUMMARY="C/C++/ObjC compiler library (Py3K bindings)"
python3_clang_REQUIRES="libclang3.9"	# ctypes
python3_clang_CONTENTS="${PYTHON3_SITELIB#/}/clang/"
mingw64_i686_clang_SUMMARY="Clang compiler for Win32 toolchain"
mingw64_i686_clang_REQUIRES="libclang3.9 mingw64-i686-binutils mingw64-i686-gcc-core mingw64-i686-gcc-g++"
mingw64_i686_clang_CONTENTS="
	usr/bin/i686-w64-mingw32-clang*
	usr/share/man/man1/i686-w64-mingw32-clang*
"
mingw64_x86_64_clang_SUMMARY="Clang compiler for Win64 toolchain"
mingw64_x86_64_clang_REQUIRES="libclang3.9 mingw64-x86_64-binutils mingw64-x86_64-gcc-core mingw64-x86_64-gcc-g++"
mingw64_x86_64_clang_CONTENTS="
	usr/bin/x86_64-w64-mingw32-clang*
	usr/share/man/man1/x86_64-w64-mingw32-clang*
"

# the executables link against both public (exported in DLL) and
# private (only in static libs) LLVM APIs
LDFLAGS+=" -Wl,--allow-multiple-definition"

src_compile() {
	# leave optimization to build system, fails to dlopen with -O2
	CFLAGS=${CFLAGS/-O[0-9]/}
	CXXFLAGS=${CXXFLAGS/-O[0-9]/}

	cd ${B}
	cygcmake \
		-DLLVM_CONFIG=/usr/bin/llvm-config \
		-DBUILD_SHARED_LIBS=ON \
		-DCLANG_ENABLE_ARCMT=ON \
		-DCLANG_ENABLE_STATIC_ANALYZER=ON \
		-DCLANG_INCLUDE_TESTS=ON -DCLANG_BUILD_TESTS=ON \
		-DCLANG_INCLUDE_EXAMPLES=ON -DCLANG_BUILD_EXAMPLES=OFF \
		-DCLANG_INCLUDE_DOCS=ON -DCLANG_BUILD_DOCS=ON \
		-DLLVM_ENABLE_SPHINX:BOOL=ON -DLLVM_ENABLE_DOXYGEN:BOOL=OFF \
		-DLLVM_LINK_LLVM_DYLIB:BOOL=ON  \
		-DGCC_INSTALL_PREFIX=/usr

	cygmake
	cygmake docs-clang-html docs-clang-man
}

src_install() {
	local tgt

	cd ${B}
	cyginstall

	dodoc docs/html/
	doman docs/man/clang.1

	dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/clang++
	dosym clang.1 /usr/share/man/man1/clang++.1
	rm ${D}/usr/bin/clang-cl

	pushd ${D}/usr/share/clang
	doemacs clang-format.el
	viminto syntax
	dovim clang-format.py
	rm -f clang-format*
	popd

	python_optimize /usr/share/scan-{build,view}

	pythoninto clang
	dopython ${S}/bindings/python/clang/*.py
	sed -i -e "s|\@CLANG_LIB_VERSION\@|${VERSION%.*}|" ${D}${PYTHON_SITELIB}/clang/cindex.py
	python_optimize

	python3into clang
	dopython3 ${S}/bindings/python/clang/*.py
	sed -i -e "s|\@CLANG_LIB_VERSION\@|${VERSION%.*}|" ${D}${PYTHON3_SITELIB}/clang/cindex.py
	2to3-${PYTHON3_VERSION} -n -w ${D}${PYTHON3_SITELIB}/clang/*.py
	python3_optimize

	for tgt in i686-w64-mingw32 x86_64-w64-mingw32
	do
		dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/${tgt}-clang
		dosym $(readlink -f ${D}/usr/bin/clang) /usr/bin/${tgt}-clang++
		cp ${D}/usr/share/man/man1/{,${tgt}-}clang.1
		dosym ${tgt}-clang.1 /usr/share/man/man1/${tgt}-clang++.1
	done
}
