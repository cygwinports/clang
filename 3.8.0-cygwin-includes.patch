--- origsrc/cfe-3.8.0.src/lib/Frontend/InitHeaderSearch.cpp	2015-12-29 21:40:23.000000000 -0600
+++ src/cfe-3.8.0.src/lib/Frontend/InitHeaderSearch.cpp	2016-06-06 03:40:38.012804700 -0500
@@ -196,11 +196,11 @@ void InitHeaderSearch::AddGnuCPlusPlusIn
 void InitHeaderSearch::AddMinGWCPlusPlusIncludePaths(StringRef Base,
                                                      StringRef Arch,
                                                      StringRef Version) {
-  AddPath(Base + "/" + Arch + "/" + Version + "/include/c++",
+  AddUnmappedPath(Base + "/" + Arch + "/" + Version + "/include/c++",
           CXXSystem, false);
-  AddPath(Base + "/" + Arch + "/" + Version + "/include/c++/" + Arch,
+  AddUnmappedPath(Base + "/" + Arch + "/" + Version + "/include/c++/" + Arch,
           CXXSystem, false);
-  AddPath(Base + "/" + Arch + "/" + Version + "/include/c++/backward",
+  AddUnmappedPath(Base + "/" + Arch + "/" + Version + "/include/c++/backward",
           CXXSystem, false);
 }
 
@@ -250,7 +250,7 @@ void InitHeaderSearch::AddDefaultCInclud
     SmallVector<StringRef, 5> dirs;
     CIncludeDirs.split(dirs, ":");
     for (StringRef dir : dirs)
-      AddPath(dir, ExternCSystem, false);
+      AddUnmappedPath(dir, ExternCSystem, false);
     return;
   }
 
@@ -306,8 +306,6 @@ void InitHeaderSearch::AddDefaultCInclud
     switch (triple.getEnvironment()) {
     default: llvm_unreachable("Include management is handled in the driver.");
     case llvm::Triple::Cygnus:
-      AddPath("/usr/include/w32api", System, false);
-      break;
     case llvm::Triple::GNU:
       break;
     }
@@ -346,6 +345,8 @@ void InitHeaderSearch::AddDefaultCInclud
   }
   default:
     AddPath("/usr/include", ExternCSystem, false);
+    if (triple.getEnvironment() == llvm::Triple::Cygnus)
+      AddPath("/usr/include/w32api", System, false);
     break;
   }
 }
@@ -400,14 +400,14 @@ AddDefaultCPlusPlusIncludePaths(const ll
   case llvm::Triple::Win32:
     switch (triple.getEnvironment()) {
     default: llvm_unreachable("Include management is handled in the driver.");
-    case llvm::Triple::Cygnus:
-      // Cygwin-1.7
-      AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.7.3");
-      AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.5.3");
-      AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.3.4");
-      // g++-4 / Cygwin-1.5
-      AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", "i686-pc-cygwin", "4.3.2");
+    case llvm::Triple::Cygnus: {
+      std::string arch = triple.getArch() == llvm::Triple::x86_64 ? "x86_64" : "i686";
+      AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "7.4.0");
+      AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "7.3.0");
+      AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "7.2.0");
+      AddMinGWCPlusPlusIncludePaths("/usr/lib/gcc", arch + "-pc-cygwin", "6.4.0");
       break;
+      }
     }
     break;
   case llvm::Triple::DragonFly:
